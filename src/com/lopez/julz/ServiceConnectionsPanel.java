/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.lopez.julz;

import db.BillOfMaterialsSummaryDao;
import db.DCRSummaryTransactionsDao;
import db.DatabaseConnection;
import db.ORAssigningDao;
import db.ParticularPaymentTransactionsDao;
import db.ServiceAccountsDao;
import db.ServiceConnectionsDao;
import db.TransactionDetailsDao;
import db.TransactionIndexDao;
import db.TransactionPaymentDetailsDao;
import helpers.ConfigFileHelpers;
import helpers.Notifiers;
import helpers.ObjectHelpers;
import helpers.TransactionsPrint;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Frame;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.print.Book;
import java.awt.print.PageFormat;
import java.awt.print.Paper;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.math.RoundingMode;
import java.sql.Connection;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFormattedTextField;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.NumberFormatter;
import pojos.BillOfMaterialsSummary;
import pojos.DCRSummaryTransactions;
import pojos.Login;
import pojos.ORAssigning;
import pojos.ParticularPaymentTransactions;
import pojos.Server;
import pojos.ServiceAccounts;
import pojos.ServiceConnections;
import pojos.TransactionDetails;
import pojos.TransactionIndex;
import pojos.TransactionPaymentDetails;

/**
 *
 * @author Julio Lopez
 */
public class ServiceConnectionsPanel extends javax.swing.JPanel {
    public Server server;
    public String office;
    
    public pojos.Login login;
    
    public DatabaseConnection db;
    public Connection connection;
    
    boolean isOrLocked = true;
    
    public ORAssigning currentOr;
    int nextOrNumber = 0;
    
    public List<ServiceConnections> serviceConnections;
    public ServiceConnections activeSvcCon;
    
    /**
     * Queue Table
     */
    Object[] columnNames = {"Applicant Name"};
    DefaultTableModel model;
    
    Object[] serviceConnectionPayablesColumns = {"Payables", "Amount", "VAT", "Total"};
    DefaultTableModel serviceConnectionPayablesModel;
    List<ParticularPaymentTransactions> serviceConnectionPayables;
    
    Object[] powerLoadPayablesColumns = {"Payables", "Amount"};
    DefaultTableModel powerLoadPayablesModel;
    BillOfMaterialsSummary bomSummary;
    
    public double serviceConnectionTotalPayable = 0;
    public double subTotal = 0;
    public double totalVat = 0;
    public double powerLoadTotalPayable = 0;
    
    /**
     * Checks
     */
    public List<TransactionPaymentDetails> checkLists;
    Object[] checkColNames = {"Bank", "Check No", "Amount"};
    DefaultTableModel checkModel;
    
    public ServiceConnectionsPanel(Login login) {
        this.login = login;
        initComponents();
        
        server = ConfigFileHelpers.getServer();
        office = ConfigFileHelpers.getOffice();
    
        db = new DatabaseConnection();
        connection = db.getDbConnectionFromDatabase(server);
        
        fetchOR();
        
        checkLists = new ArrayList<>();
        serviceConnections = new ArrayList<>();
        serviceConnectionPayables = new ArrayList<>();
        
        getQueue();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        orNumberField = new javax.swing.JTextField();
        unlockOrNumberBtn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        NumberFormat format = NumberFormat.getInstance();
        format.setMinimumFractionDigits(2);
        format.setMaximumFractionDigits(2);
        format.setRoundingMode(RoundingMode.HALF_UP);
        NumberFormatter formatter = new NumberFormatter(format);
        formatter.setValueClass(Double.class);
        formatter.setAllowsInvalid(false);
        formatter.setCommitsOnValidEdit(true);
        cashPaymentField = new javax.swing.JFormattedTextField(formatter);
        jScrollPane2 = new javax.swing.JScrollPane();
        checkTable = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        addCheckButton = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        totalAmountPaid = new javax.swing.JFormattedTextField();
        jLabel12 = new javax.swing.JLabel();
        transactBtn = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JSeparator();
        clearChecksBtn = new javax.swing.JButton();
        totalAmounPayable = new javax.swing.JFormattedTextField(formatter);
        jLabel13 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        payablesTable = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        queueTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        powerLoadPayables = new javax.swing.JTable();

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/power_FILL1_wght400_GRAD0_opsz24.png"))); // NOI18N
        jLabel1.setText("Service Connection Applications Payment");
        jLabel1.setIconTextGap(10);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Payment Config", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12), new java.awt.Color(255, 51, 0))); // NOI18N

        jLabel9.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel9.setText("OR Number");

        orNumberField.setFont(new java.awt.Font("Arial", 1, 23)); // NOI18N
        orNumberField.setForeground(new java.awt.Color(204, 0, 0));
        orNumberField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        orNumberField.setEnabled(false);

        unlockOrNumberBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/lock_open_FILL1_wght400_GRAD0_opsz20.png"))); // NOI18N
        unlockOrNumberBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unlockOrNumberBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(orNumberField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(unlockOrNumberBtn)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(orNumberField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(unlockOrNumberBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Payment Options", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12), new java.awt.Color(0, 153, 153))); // NOI18N
        jPanel3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel10.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel10.setText("Total Amount Payable");

        cashPaymentField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        cashPaymentField.setEnabled(false);
        cashPaymentField.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        cashPaymentField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cashPaymentFieldKeyReleased(evt);
            }
        });

        checkTable.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        checkTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(checkTable);

        jLabel11.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel11.setText("Check Payments");

        addCheckButton.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        addCheckButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/add_FILL1_wght400_GRAD0_opsz20.png"))); // NOI18N
        addCheckButton.setText("Add Check");
        addCheckButton.setEnabled(false);
        addCheckButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCheckButtonActionPerformed(evt);
            }
        });

        totalAmountPaid.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.##"))));
        totalAmountPaid.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        totalAmountPaid.setEnabled(false);
        totalAmountPaid.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabel12.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel12.setText("Total Amount Paid");

        transactBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        transactBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/check_circle_FILL1_wght400_GRAD0_opsz20.png"))); // NOI18N
        transactBtn.setText("Transact");
        transactBtn.setFocusable(false);
        transactBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transactBtnActionPerformed(evt);
            }
        });

        clearChecksBtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        clearChecksBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/delete_FILL1_wght400_GRAD0_opsz20.png"))); // NOI18N
        clearChecksBtn.setText("Clear Checks");
        clearChecksBtn.setEnabled(false);
        clearChecksBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearChecksBtnActionPerformed(evt);
            }
        });

        totalAmounPayable.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        totalAmounPayable.setEnabled(false);
        totalAmounPayable.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        totalAmounPayable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                totalAmounPayableKeyReleased(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel13.setText("Cash Payment");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(transactBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator5)
                    .addComponent(jSeparator4)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(totalAmountPaid, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(46, 46, 46))
                            .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(totalAmounPayable, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(addCheckButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(clearChecksBtn))
                            .addComponent(cashPaymentField))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalAmounPayable, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cashPaymentField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(addCheckButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearChecksBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalAmountPaid, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(transactBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel2.setText("Service Connection Payables");

        payablesTable.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        payablesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        payablesTable.setRowHeight(28);
        jScrollPane3.setViewportView(payablesTable);

        queueTable.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        queueTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        queueTable.setRowHeight(28);
        queueTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                queueTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(queueTable);

        jLabel3.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 102, 204));
        jLabel3.setText("Applications Queue");

        jLabel4.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel4.setText("Power Load Payables");

        powerLoadPayables.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        powerLoadPayables.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        powerLoadPayables.setRowHeight(28);
        jScrollPane4.setViewportView(powerLoadPayables);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 457, Short.MAX_VALUE)
                            .addComponent(jScrollPane4)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel4))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 674, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void unlockOrNumberBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unlockOrNumberBtnActionPerformed
        if (isOrLocked) {
            orNumberField.setEnabled(true);
            isOrLocked = false;
        } else {
            orNumberField.setEnabled(false);
            nextOrNumber = Integer.valueOf(orNumberField.getText());
            isOrLocked = true;
        }
    }//GEN-LAST:event_unlockOrNumberBtnActionPerformed

    private void cashPaymentFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cashPaymentFieldKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            showTransactConfirmation();
        } else {
            totalAmountPaid.setValue(getTotalAmount());
        }
    }//GEN-LAST:event_cashPaymentFieldKeyReleased

    private void addCheckButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCheckButtonActionPerformed
        try {
            cashPaymentField.setValue(null);

            JDialog checkDialog = new JDialog((JFrame) SwingUtilities.getWindowAncestor(getParent()));
            Dimension size = Toolkit.getDefaultToolkit().getScreenSize();
            int x = (int) size.getWidth();
            int y = (int) size.getHeight();
            checkDialog.setLocation(x/3, y/3);
            checkDialog.setTitle("Add Check");

            JPanel mainPanel = new JPanel(new GridLayout(0, 1, 0, 5));
            mainPanel.setBorder(new EmptyBorder(15, 15, 15, 15));

            mainPanel.add(new JLabel("Input Check Number"));
            JTextField checkNoField = new JTextField();
            checkNoField.setPreferredSize(new Dimension(400, 36));
            checkNoField.setFont(new Font("Arial", Font.BOLD, 16));
            mainPanel.add(checkNoField);

            mainPanel.add(new JLabel("Input Check Amount"));
            NumberFormat format = NumberFormat.getInstance();
            format.setMinimumFractionDigits(2);
            format.setMaximumFractionDigits(2);
            format.setRoundingMode(RoundingMode.HALF_UP);
            NumberFormatter formatter = new NumberFormatter(format);
            formatter.setValueClass(Double.class);
            formatter.setAllowsInvalid(false);
            formatter.setCommitsOnValidEdit(true);
            JFormattedTextField amountField = new JFormattedTextField(formatter);
            amountField.setPreferredSize(new Dimension(400, 36));
            amountField.setFont(new Font("Arial", Font.BOLD, 16));
            amountField.setHorizontalAlignment(JTextField.RIGHT);
            amountField.setValue(getOverallTotal());
            amountField.addFocusListener(new FocusAdapter() {
                @Override
                public void focusGained(FocusEvent e) {
                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            amountField.selectAll();
                        }
                    });
                }
            });
            mainPanel.add(amountField);

            mainPanel.add(new JLabel("Input Bank"));
            JTextField checkBank = new JTextField();
            checkBank.setPreferredSize(new Dimension(400, 36));
            checkBank.setFont(new Font("Arial", Font.BOLD, 16));
            mainPanel.add(checkBank);

            JButton saveCheckBtn = new JButton("Add Check");
            saveCheckBtn.setFont(new Font("Arial", Font.PLAIN, 12));
            saveCheckBtn.setPreferredSize(new Dimension(100, 32));
            saveCheckBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/check_circle_FILL1_wght400_GRAD0_opsz20.png")));
            mainPanel.add(saveCheckBtn);

            checkNoField.addKeyListener(new KeyListener() {
                @Override
                public void keyReleased(KeyEvent e) {
                    if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                        amountField.requestFocus();
                    }
                }

                @Override
                public void keyTyped(KeyEvent e) {
                }
                @Override
                public void keyPressed(KeyEvent e) {
                }
            });

            amountField.addKeyListener(new KeyListener() {
                @Override
                public void keyReleased(KeyEvent e) {
                    if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                        checkBank.requestFocus();
                    }
                }

                @Override
                public void keyTyped(KeyEvent e) {
                }
                @Override
                public void keyPressed(KeyEvent e) {
                }
            });

            checkBank.addKeyListener(new KeyListener() {
                @Override
                public void keyReleased(KeyEvent e) {
                    if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                        checkLists.add(new TransactionPaymentDetails(
                            ObjectHelpers.generateIDandRandString(),
                            null,
                            amountField.getValue().toString(),
                            "Check",
                            checkBank.getText(),
                            checkNoField.getText(),
                            null,
                            nextOrNumber + "",
                            ObjectHelpers.getCurrentTimestamp(),
                            ObjectHelpers.getCurrentTimestamp()
                        ));

                        populateCheckTable();
                        checkDialog.dispose();
                        cashPaymentField.requestFocus();
                        totalAmountPaid.setValue(getTotalAmount());
                    }
                }

                @Override
                public void keyTyped(KeyEvent e) {
                }
                @Override
                public void keyPressed(KeyEvent e) {
                }
            });

            saveCheckBtn.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    checkLists.add(new TransactionPaymentDetails(
                        ObjectHelpers.generateIDandRandString(),
                        null,
                        amountField.getValue().toString(),
                        "Check",
                        checkBank.getText(),
                        checkNoField.getText(),
                        null,
                        nextOrNumber + "",
                        ObjectHelpers.getCurrentTimestamp(),
                        ObjectHelpers.getCurrentTimestamp()
                    ));

                    populateCheckTable();
                    checkDialog.dispose();
                    cashPaymentField.requestFocus();
                    totalAmountPaid.setValue(getTotalAmount());
                }
            });

            checkDialog.add(mainPanel);
            checkDialog.pack();
            checkDialog.setVisible(true);
        } catch (Exception e) {
            e.printStackTrace();
            Notifiers.showErrorMessage("Error Adding Check Payment", e.getMessage());
        }
    }//GEN-LAST:event_addCheckButtonActionPerformed

    private void transactBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transactBtnActionPerformed
        showTransactConfirmation();
    }//GEN-LAST:event_transactBtnActionPerformed

    private void clearChecksBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearChecksBtnActionPerformed
        checkLists.clear();
        cashPaymentField.setValue(null);
        totalAmountPaid.setValue(getTotalAmount());
        transactBtn.requestFocus();
        if (checkModel != null) {
            checkModel.getDataVector().removeAllElements();
            checkModel.fireTableDataChanged();
        }
    }//GEN-LAST:event_clearChecksBtnActionPerformed

    private void queueTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_queueTableMouseClicked
        if (evt.getClickCount() == 2) {
            activeSvcCon = serviceConnections.get(queueTable.getSelectedRow());
            getAllPayables(activeSvcCon);
        }
    }//GEN-LAST:event_queueTableMouseClicked

    private void totalAmounPayableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_totalAmounPayableKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_totalAmounPayableKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCheckButton;
    private javax.swing.JFormattedTextField cashPaymentField;
    private javax.swing.JTable checkTable;
    private javax.swing.JButton clearChecksBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JTextField orNumberField;
    private javax.swing.JTable payablesTable;
    private javax.swing.JTable powerLoadPayables;
    private javax.swing.JTable queueTable;
    private javax.swing.JFormattedTextField totalAmounPayable;
    private javax.swing.JFormattedTextField totalAmountPaid;
    private javax.swing.JButton transactBtn;
    private javax.swing.JButton unlockOrNumberBtn;
    // End of variables declaration//GEN-END:variables

    public void fetchOR() {
        currentOr = ORAssigningDao.getCurrentOR(connection, login.getId());
        nextOrNumber = Integer.parseInt(currentOr.getORumber()) + 1;
        orNumberField.setText(nextOrNumber + "");
    }
    
    public double getTotalAmount() {
        double cash = Double.valueOf(cashPaymentField.getValue() != null ? cashPaymentField.getValue().toString() : "0");
        double check = getTotalCheckPayments();
        return cash + check;
    }
    
    public double getTotalCheckPayments() {
        try {
             double ttl = 0;
             for(int i=0; i<checkLists.size(); i++) {
                ttl += Double.valueOf(checkLists.get(i).getAmount());
             }
             return ttl;
        } catch (Exception e) {
            e.printStackTrace();
            return 0;
        }
    }
    
    public void populateCheckTable() {
        try {
            clearChecksBtn.setEnabled(true);
            if (checkModel != null) {
                checkModel.getDataVector().removeAllElements();
                checkModel.fireTableDataChanged();
            }
            
            int checklistsize = checkLists.size();
            Object[][] data = new Object[checklistsize][checkColNames.length];
            for (int i=0; i<checklistsize; i++) {
                data[i][0] = checkLists.get(i).getBank();
                data[i][1] = checkLists.get(i).getCheckNo();
                data[i][2] = ObjectHelpers.roundTwo(checkLists.get(i).getAmount());
            }
            
            // DISPLAY TO TABLE
            checkModel = new DefaultTableModel(data, checkColNames);
            DefaultTableCellRenderer rightRendererBlue = new DefaultTableCellRenderer();
            rightRendererBlue.setHorizontalAlignment(JLabel.RIGHT);
            rightRendererBlue.setFont(new Font("Arial", Font.BOLD, 14));
            rightRendererBlue.setForeground(Color.BLUE);

            checkTable.setModel(checkModel);
            checkTable.setRowHeight(25);
            checkTable.getColumnModel().getColumn(2).setCellRenderer(rightRendererBlue);
            checkTable.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
            
            transactBtn.requestFocus();
            
            // VALIDATE TOTAL AMOUNT SELECTED
        } catch (Exception e) {
            e.printStackTrace();
            Notifiers.showErrorMessage("Error Getting Bills", e.getMessage());
        }
    }
    
    public void updateOR() {
        fetchOR();
        getQueue();
        System.out.println("OR FETCHED FOR SERVICE CONNECTION PAYMENTS");
    }
    
    public void getQueue() {
        try {
            serviceConnections.clear();
            
            serviceConnections.addAll(ServiceConnectionsDao.getQueue(connection));
            int qSize = serviceConnections.size();
            Object data[][] = new Object[qSize][columnNames.length];
            for (int i=0; i<qSize; i++) {
                data[i][0] = serviceConnections.get(i).getServiceAccountName();
            }
            
            model = new DefaultTableModel(data, columnNames) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }                
            };
            
            queueTable.setModel(model);
        } catch (Exception e) {
            e.printStackTrace();
            Notifiers.showErrorMessage("Error Getting Queue", e.getMessage());
        }
    }
    
    public void getAllPayables(ServiceConnections connections) {
        try {
            serviceConnectionPayables.clear();
            serviceConnectionTotalPayable = 0;
            powerLoadTotalPayable = 0;
            subTotal = 0;
            totalVat = 0;
            bomSummary = null;
            addCheckButton.setEnabled(true);
            if (serviceConnectionPayablesModel != null) {
                serviceConnectionPayablesModel.getDataVector().removeAllElements();
                serviceConnectionPayablesModel.fireTableDataChanged();
            }
            if (powerLoadPayablesModel != null) {
                powerLoadPayablesModel.getDataVector().removeAllElements();
                powerLoadPayablesModel.fireTableDataChanged();
            }
            
            /**
             * ============================================
             * SERVICE CONNECTIONS PAYABLE
             * ============================================
             */
            serviceConnectionPayables.addAll(ParticularPaymentTransactionsDao.getPaymentParticulars(connection, connections.getId()));
            Object scpData[][] = new Object[serviceConnectionPayables.size()+1][serviceConnectionPayablesColumns.length];
            for (int i=0; i<serviceConnectionPayables.size(); i++) {
                scpData[i][0] = serviceConnectionPayables.get(i).getParticularName();
                scpData[i][1] = ObjectHelpers.roundTwo(serviceConnectionPayables.get(i).getAmount() != null ? serviceConnectionPayables.get(i).getAmount() : "0");
                scpData[i][2] = ObjectHelpers.roundTwo(serviceConnectionPayables.get(i).getVat() != null ? serviceConnectionPayables.get(i).getVat() : "0");
                scpData[i][3] = ObjectHelpers.roundTwo(serviceConnectionPayables.get(i).getTotal() != null ? serviceConnectionPayables.get(i).getTotal() : "0");
                serviceConnectionTotalPayable += Double.valueOf(serviceConnectionPayables.get(i).getTotal() != null ? serviceConnectionPayables.get(i).getTotal() : "0");
                subTotal += Double.valueOf(serviceConnectionPayables.get(i).getAmount()!= null ? serviceConnectionPayables.get(i).getAmount() : "0");
                totalVat += Double.valueOf(serviceConnectionPayables.get(i).getVat() != null ? serviceConnectionPayables.get(i).getVat() : "0");
            }
            
            scpData[serviceConnectionPayables.size()][0] = "Over All Total";
            scpData[serviceConnectionPayables.size()][1] = "";
            scpData[serviceConnectionPayables.size()][2] = "";
            scpData[serviceConnectionPayables.size()][3] = ObjectHelpers.roundTwo(serviceConnectionTotalPayable + "");
            
            serviceConnectionPayablesModel = new DefaultTableModel(scpData, serviceConnectionPayablesColumns) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }                
            };
            
            DefaultTableCellRenderer rightRendererRed = new DefaultTableCellRenderer();
            rightRendererRed.setHorizontalAlignment(JLabel.RIGHT);
            rightRendererRed.setForeground(Color.red);
            
            DefaultTableCellRenderer rightRendererBlue = new DefaultTableCellRenderer();
            rightRendererBlue.setHorizontalAlignment(JLabel.RIGHT);
            rightRendererBlue.setForeground(Color.BLUE);
            
            DefaultTableCellRenderer rightRendererGreen = new DefaultTableCellRenderer();
            rightRendererGreen.setHorizontalAlignment(JLabel.RIGHT);
            rightRendererGreen.setForeground(Color.decode("#00675b"));
            
            payablesTable.setModel(serviceConnectionPayablesModel);
            payablesTable.getColumnModel().getColumn(1).setMaxWidth(90);
            payablesTable.getColumnModel().getColumn(2).setMaxWidth(80);
            payablesTable.getColumnModel().getColumn(3).setMaxWidth(90);
            payablesTable.getColumnModel().getColumn(1).setCellRenderer(rightRendererGreen);
            payablesTable.getColumnModel().getColumn(2).setCellRenderer(rightRendererRed);
            payablesTable.getColumnModel().getColumn(3).setCellRenderer(rightRendererBlue);
            
            /**
             * ============================================
             * POWER LOAD PAYABLES
             * ============================================
             */
            bomSummary = BillOfMaterialsSummaryDao.getOne(connection, connections.getId());
            if (bomSummary != null) {
                Object[][] powerLoadData = new Object[6][powerLoadPayablesColumns.length];
                powerLoadData[0][0] = "Materials";
                powerLoadData[0][1] = ObjectHelpers.roundTwo(bomSummary.getSubTotal());
                powerLoadData[1][0] = "Transformer";
                powerLoadData[1][1] = ObjectHelpers.roundTwo(bomSummary.getTransformerTotal());
                powerLoadData[2][0] = "Total Labor Cost";
                powerLoadData[2][1] = ObjectHelpers.roundTwo(bomSummary.getLaborCost());
                powerLoadData[3][0] = "Handling Cost";
                powerLoadData[3][1] = ObjectHelpers.roundTwo(bomSummary.getHandlingCost());
                powerLoadData[4][0] = "VAT";
                powerLoadData[4][1] = ObjectHelpers.roundTwo(bomSummary.getTotalVAT());
                powerLoadData[5][0] = "Over All Total";
                powerLoadData[5][1] = ObjectHelpers.roundTwo(bomSummary.getTotal());
                powerLoadTotalPayable = Double.valueOf(bomSummary.getTotal());
                
                powerLoadPayablesModel = new DefaultTableModel(powerLoadData, powerLoadPayablesColumns) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }                
                };
                
                powerLoadPayables.setModel(powerLoadPayablesModel);
                powerLoadPayables.getColumnModel().getColumn(1).setMaxWidth(130);
                powerLoadPayables.getColumnModel().getColumn(1).setCellRenderer(rightRendererGreen);
            }
            
            /**
             * SHOW DETAILS
             */
            totalAmounPayable.setValue(getOverallTotal());
            cashPaymentField.setEnabled(true);
            cashPaymentField.setValue(getOverallTotal());
            cashPaymentField.requestFocus();
        } catch (Exception e) {
            e.printStackTrace();
            Notifiers.showErrorMessage("Error Getting Payables", e.getMessage());
        }
    }
    
    public double getOverallTotal() {
        return serviceConnectionTotalPayable + powerLoadTotalPayable;
    }
    
    public void showTransactConfirmation() {
        try {
            // SHOW CONFIRMATION
            JDialog confirmationDialog = new JDialog((Frame) SwingUtilities.getWindowAncestor(getParent()));
            Dimension size = Toolkit.getDefaultToolkit().getScreenSize();
            int x = (int) size.getWidth();
            int y = (int) size.getHeight();
            confirmationDialog.setLocation(x/3, y/3);
            confirmationDialog.setTitle("Payment Confirmation");

            JPanel mainPanel = new JPanel(new GridLayout(0, 2, 5, 5));
            mainPanel.setBorder(new EmptyBorder(15, 15, 15, 15));

            // CASH AMOUNT
            JLabel cashAmntLabel = new JLabel("CASH AMOUNT");
            cashAmntLabel.setFont(new Font("Arial", Font.BOLD, 16));
            mainPanel.add(cashAmntLabel);

            NumberFormat format = NumberFormat.getInstance();
            format.setMinimumFractionDigits(2);
            format.setMaximumFractionDigits(2);
            format.setRoundingMode(RoundingMode.HALF_UP);
            NumberFormatter formatter = new NumberFormatter(format);
            formatter.setValueClass(Double.class);
            formatter.setAllowsInvalid(false);
            formatter.setCommitsOnValidEdit(true);

            JFormattedTextField cashAmountField = new JFormattedTextField(formatter);
            cashAmountField.setPreferredSize(new Dimension(250, 36));
            cashAmountField.setFont(new Font("Arial", Font.BOLD, 19)); 
            cashAmountField.setHorizontalAlignment(JTextField.RIGHT);
            cashAmountField.setValue(cashPaymentField.getValue());
            cashAmountField.addFocusListener(new FocusAdapter() {
                @Override
                public void focusGained(FocusEvent e) {
                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            cashAmountField.selectAll();
                        }
                    });                    
                }                
            });                

            mainPanel.add(cashAmountField);

            // CHECK AMOUNT
            JLabel checkAmount = new JLabel("CHECK AMOUNT");
            checkAmount.setFont(new Font("Arial", Font.BOLD, 16));
            mainPanel.add(checkAmount);

            JFormattedTextField totalCheckAmountField = new JFormattedTextField(formatter);
            totalCheckAmountField.setPreferredSize(new Dimension(250, 36));
            totalCheckAmountField.setFont(new Font("Arial", Font.BOLD, 19)); 
            totalCheckAmountField.setHorizontalAlignment(JTextField.RIGHT);
            totalCheckAmountField.setValue(getTotalCheckPayments());
            totalCheckAmountField.setEnabled(false);
            mainPanel.add(totalCheckAmountField);

            // TOTAL AMOUNT PAID
            JLabel totalAmountPaidLabel = new JLabel("TOTAL AMOUNT PAID");
            totalAmountPaidLabel.setFont(new Font("Arial", Font.BOLD, 16));
            mainPanel.add(totalAmountPaidLabel);                

            JFormattedTextField totalAmountPaidField = new JFormattedTextField(formatter);
            totalAmountPaidField.setPreferredSize(new Dimension(250, 36));
            totalAmountPaidField.setFont(new Font("Arial", Font.BOLD, 19)); 
            totalAmountPaidField.setHorizontalAlignment(JTextField.RIGHT);
            totalAmountPaidField.setValue(getTotalAmount());
            totalAmountPaidField.setEnabled(false);
            mainPanel.add(totalAmountPaidField);

            // TOTAL AMOUNT DUE
            JLabel totalAmountDueLabel = new JLabel("TOTAL AMOUNT DUE");
            totalAmountDueLabel.setFont(new Font("Arial", Font.BOLD, 16));
            mainPanel.add(totalAmountDueLabel);                

            JFormattedTextField totalAmountDueField = new JFormattedTextField(formatter);
            totalAmountDueField.setPreferredSize(new Dimension(250, 36));
            totalAmountDueField.setFont(new Font("Arial", Font.BOLD, 19)); 
            totalAmountDueField.setForeground(Color.red);
            totalAmountDueField.setHorizontalAlignment(JTextField.RIGHT);
            totalAmountDueField.setValue(getOverallTotal());
            mainPanel.add(totalAmountDueField);

            // TOTAL AMOUNT DUE
            JLabel changeLabel = new JLabel("CHANGE");
            changeLabel.setFont(new Font("Arial", Font.BOLD, 16));
            mainPanel.add(changeLabel);                

            JFormattedTextField changeField = new JFormattedTextField(formatter);
            changeField.setPreferredSize(new Dimension(250, 36));
            changeField.setFont(new Font("Arial", Font.BOLD, 19)); 
            changeField.setForeground(Color.BLUE);
            changeField.setHorizontalAlignment(JTextField.RIGHT);
            changeField.setValue(getTotalAmount() - getOverallTotal());
            mainPanel.add(changeField);

            cashAmountField.addKeyListener(new KeyListener() {
                @Override
                public void keyTyped(KeyEvent e) {

                }
                @Override
                public void keyPressed(KeyEvent e) {

                }

                @Override
                public void keyReleased(KeyEvent e) {
                    try {
                        if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                            transact();
                            confirmationDialog.dispose();
                        } else {
                            cashAmountField.commitEdit();
                            cashPaymentField.setValue(cashAmountField.getValue());
                            totalAmountPaid.setValue(getTotalAmount());
                            totalAmountPaidField.setValue(getTotalAmount());
                            changeField.setValue(getTotalAmount() - getOverallTotal());  
                        }
                    } catch (ParseException ex) {
                        Logger.getLogger(PowerBillsPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            });

            JButton transactButton = new JButton("CONFIRM", new javax.swing.ImageIcon(getClass().getResource("/icons/check_circle_FILL1_wght400_GRAD0_opsz20.png")));
            transactButton.setFont(new Font("Arial", Font.BOLD, 18)); 
            transactButton.setPreferredSize(new Dimension(100, 40));
            mainPanel.add(new JLabel());
            mainPanel.add(transactButton);
            
            transactButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    transact();
                    confirmationDialog.dispose();
                }
            });

            confirmationDialog.add(mainPanel);
            confirmationDialog.pack();
            confirmationDialog.setVisible(true);
            
        } catch (Exception e) {
            e.printStackTrace();
            Notifiers.showErrorMessage("Error Showing Payment Confirmation", e.getMessage());
        }
    }
    
    public void transact() {
        try {
            if (getTotalAmount() >= getOverallTotal()) {
                String paymentUsed = "";
                if (cashPaymentField.getValue() != null && checkLists.size() > 0) {
                    paymentUsed = "Cash and Check";
                } else if (cashPaymentField.getValue() == null && checkLists.size() > 0) {
                    paymentUsed = "Check";
                } else {
                    paymentUsed = "Cash";
                }
                /**
                 * SAVE TRANSACTION
                 */
                String transId = ObjectHelpers.getTimeInMillis();
                TransactionIndex transaction = new TransactionIndex(
                        transId,
                        office + "-" + transId,
                        activeSvcCon.getServiceAccountName(),
                        "Service Connection Application Payment of" + activeSvcCon.getServiceAccountName(),
                        nextOrNumber + "",
                        ObjectHelpers.getSqlDate(),
                        ObjectHelpers.roundTwoNoComma(subTotal + ""),
                        ObjectHelpers.roundTwoNoComma(totalVat + ""),
                        ObjectHelpers.roundTwoNoComma(getOverallTotal() + ""),
                        null,
                        login.getId(),
                        activeSvcCon.getId(),
                        null,
                        null,
                        (activeSvcCon.getLoadCategory() != null && activeSvcCon.getLoadCategory().equals("above 5kVa") ? "Service Connection Application w Power Load" : "Service Connection Application"),
                        paymentUsed,
                        null,
                        null,
                        null,
                        null,
                        null,
                        activeSvcCon.getServiceAccountName(),
                        null,
                        null, 
                        null,
                        activeSvcCon.getAccountNumber(),
                        ObjectHelpers.getCurrentTimestamp(),
                        ObjectHelpers.getCurrentTimestamp()
                );
                
                TransactionIndexDao.insert(connection, transaction);
                
                 // UPDATE SERVICE CONNECTION OR
                ServiceConnectionsDao.updateOr(connection, activeSvcCon.getId(), transaction.getORNumber(), transaction.getORDate());
                ServiceConnectionsDao.updateOrOnServiceConPayments(connection, activeSvcCon.getId(), transaction.getORNumber());

                /**
                 * SAVE TRANSACTION DETAILS
                 */
                List<TransactionDetails> detailsList = new ArrayList<>(); // FOR PRINTING
                for (int i=0; i<serviceConnectionPayables.size(); i++) {
                    TransactionDetails details = new TransactionDetails(
                            ObjectHelpers.generateIDandRandString(),
                            transId,
                            serviceConnectionPayables.get(i).getParticularName(),
                            serviceConnectionPayables.get(i).getAmount(),
                            serviceConnectionPayables.get(i).getVat(),
                            serviceConnectionPayables.get(i).getTotal(),
                            serviceConnectionPayables.get(i).getAccountCode(),
                            ObjectHelpers.getCurrentTimestamp(),
                            ObjectHelpers.getCurrentTimestamp()
                    );
                    TransactionDetailsDao.insert(connection, details);
                    detailsList.add(details);

                    /**
                     * SAVE DCR
                     */
                    if (serviceConnectionPayables.get(i).getAccountCode() != null) {
                        DCRSummaryTransactions dcr = new DCRSummaryTransactions(
                            ObjectHelpers.generateIDandRandString(),
                            serviceConnectionPayables.get(i).getAccountCode(),
                            null,
                            null,
                            serviceConnectionPayables.get(i).getTotal(),
                            ObjectHelpers.getSqlDate(),
                            ObjectHelpers.getSqlTime(),
                            login.getId(),
                            null,
                            null,
                            ObjectHelpers.getCurrentTimestamp(),
                            ObjectHelpers.getCurrentTimestamp(),
                            nextOrNumber + "",
                            "COLLECTION",
                            office,
                            null);
                        DCRSummaryTransactionsDao.insert(connection, dcr);                           
                    }                            
                }
                
                /**
                 * IF POWER LOAD
                 **/
                if (bomSummary != null) {
                    TransactionDetails details = new TransactionDetails(
                            ObjectHelpers.generateIDandRandString(),
                            transId,
                            "Power Load Payables",
                            ObjectHelpers.roundTwoNoComma(bomSummary.getSubTotal()),
                            ObjectHelpers.roundTwoNoComma(bomSummary.getTotalVAT()),
                            ObjectHelpers.roundTwoNoComma(bomSummary.getTotal()),
                            "250-251-00",
                            ObjectHelpers.getCurrentTimestamp(),
                            ObjectHelpers.getCurrentTimestamp()
                    );
                    TransactionDetailsDao.insert(connection, details);
                    
                    bomSummary.setORNumber(orNumberField.getText());
                    bomSummary.setORDate(ObjectHelpers.getSqlDate());
                    BillOfMaterialsSummaryDao.updateOr(connection, bomSummary);
                    
                    DCRSummaryTransactions dcr = new DCRSummaryTransactions(
                            ObjectHelpers.generateIDandRandString(),
                            "250-251-00",
                            null,
                            null,
                            ObjectHelpers.roundTwoNoComma(bomSummary.getTotal()),
                            ObjectHelpers.getSqlDate(),
                            ObjectHelpers.getSqlTime(),
                            login.getId(),
                            null,
                            null,
                            ObjectHelpers.getCurrentTimestamp(),
                            ObjectHelpers.getCurrentTimestamp(),
                            nextOrNumber + "",
                            "COLLECTION",
                            office,
                            null);
                        DCRSummaryTransactionsDao.insert(connection, dcr); 
                }

                /**
                 * SAVE Transaction Logs
                 */
                if (cashPaymentField.getValue() != null) {
                    TransactionPaymentDetails logs = new TransactionPaymentDetails(
                            ObjectHelpers.generateIDandRandString(),
                            transId,
                            cashPaymentField.getValue().toString(),
                            "Cash",
                            null,
                            null,
                            null,
                            nextOrNumber + "",
                            ObjectHelpers.getCurrentTimestamp(),
                            ObjectHelpers.getCurrentTimestamp()
                    );
                    TransactionPaymentDetailsDao.insert(connection, logs);
                }
                if (checkLists.size() > 0) {
                    for (int i=0; i<checkLists.size(); i++) {
                        TransactionPaymentDetails checkLogs = checkLists.get(i);
                        checkLogs.setTransactionIndexId(transId);
                        TransactionPaymentDetailsDao.insert(connection, checkLogs);
                    }
                }

                /**
                 * SAVE OR ASSIGNING
                 */
                ORAssigning orNew = new ORAssigning(
                        ObjectHelpers.generateIDandRandString(),
                        orNumberField.getText(),
                        login.getId(),
                        ObjectHelpers.getSqlDate(),
                        null,
                        ObjectHelpers.getSqlTime(),
                        office,
                        ObjectHelpers.getCurrentTimestamp(),
                        ObjectHelpers.getCurrentTimestamp()
                );
                ORAssigningDao.insert(connection, orNew);
                
                /**
                 * PRINT HERE
                 */
                print(transaction, detailsList, login.getUsername());
                
                /**
                 * CLEAR FIELDS
                 */
                serviceConnectionPayables.clear();
                checkLists.clear();
                serviceConnectionTotalPayable = 0;
                powerLoadTotalPayable = 0;
                subTotal = 0;
                totalVat = 0;
                bomSummary = null;
                addCheckButton.setEnabled(true);
                if (serviceConnectionPayablesModel != null) {
                    serviceConnectionPayablesModel.getDataVector().removeAllElements();
                    serviceConnectionPayablesModel.fireTableDataChanged();
                }
                if (powerLoadPayablesModel != null) {
                    powerLoadPayablesModel.getDataVector().removeAllElements();
                    powerLoadPayablesModel.fireTableDataChanged();
                }
                if (checkModel != null) {
                    checkModel.getDataVector().removeAllElements();
                    checkModel.fireTableDataChanged();
                }
                fetchOR();
                getQueue();
                totalAmounPayable.setValue(null);
                cashPaymentField.setEnabled(false);
                cashPaymentField.setValue(null);
                addCheckButton.setEnabled(false);
                clearChecksBtn.setEnabled(false);
            } else {
                Notifiers.showErrorMessage("Invalid Amount", "The amount you inputted is less than the actual amount.");
            }
        } catch (Exception e) {
            e.printStackTrace();
            Notifiers.showErrorMessage("Error Saving the Transaction", e.getMessage());
        }
    }
 
    public void print(TransactionIndex index, List<TransactionDetails> details, String username) {
        try {
            ServiceAccounts account = ServiceAccountsDao.getOneById(connection, index.getAccountNumber());
            
            PrinterJob job = PrinterJob.getPrinterJob();
            PageFormat pf = job.defaultPage();
            Paper paper = pf.getPaper();
            double width = 5d * 72d;
            double height = 4d * 72d;
            double margin = 0.1d * 72d;
            paper.setSize(width, height);
            paper.setImageableArea(
                    margin,
                    margin,
                    width - (margin * 2),
                    height - (margin * 2));
            pf.setPaper(paper);
            Book pBook = new Book();
            pBook.append(new TransactionsPrint(index, details, username, account), pf);
            job.setPageable(pBook);

    //            job.setPrintable(new PowerBillPrint(bills.get(i), account));
            try {
                job.print();
            } catch (PrinterException e) {
                e.printStackTrace();
                Notifiers.showErrorMessage("Error Printing Payment", "Transaction No: " + index.getId()+ "\n" + e.getMessage());
            }
        } catch (Exception e) {
            e.printStackTrace();
            Notifiers.showErrorMessage("Error Printing OR", e.getMessage());
        }
    }
}
